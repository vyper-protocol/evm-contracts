/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DigitalPayoffPool,
  DigitalPayoffPoolInterface,
} from "../../../contracts/payoff/DigitalPayoffPool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "PayoffCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_strike",
        type: "int256",
      },
      {
        internalType: "bool",
        name: "_isCall",
        type: "bool",
      },
      {
        internalType: "contract IOracleAdapter",
        name: "_ratePlugin",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_oracleID",
        type: "uint256",
      },
    ],
    name: "createDigitalPayoff",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "digitalData",
    outputs: [
      {
        internalType: "contract IOracleAdapter",
        name: "oracleAdapter",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isCall",
        type: "bool",
      },
      {
        internalType: "int256",
        name: "strike",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "oracleID",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "payoffID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "uint256",
        name: "pnlLong",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pnlShort",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b5061049d806100256000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632d29a47b146100465780632e08a22d1461007357806372279c0f146100e1575b600080fd5b610059610054366004610329565b6100f6565b604080519283526020830191909152015b60405180910390f35b6100b7610081366004610355565b6000602081905290815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b604080516001600160a01b039095168552921515602085015291830152606082015260800161006a565b6100f46100ef36600461036e565b6101f7565b005b600083815260208181526040808320815160808101835281546001600160a01b038116808352600160a01b90910460ff1615159482019490945260018201548184015260029091015460608201819052915163b94fe91760e01b815260048101929092528392909183919063b94fe917906024016040805180830381865afa158015610186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101aa91906103c7565b506040830151602084015191925090818311828414178116811983851016808217600181146101e15760009850898b0197506101e8565b8998508a97505b50505050505050935093915050565b6001805460009182610208836103eb565b91905055905061023c6040518060400160405280600c81526020016b7061796f666649443a20257360a01b815250826102bf565b600081815260208181526040918290206001810188905580546001600160a81b031916600160a01b881515026001600160a01b031916176001600160a01b0387161781556002810185905591518381527f1db49f4bce477451925add07d4d26b065bc328f3d34dd524e2fec4c7aadcd55a910160405180910390a1505050505050565b61030482826040516024016102d5929190610412565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052610308565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008060006060848603121561033e57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561036757600080fd5b5035919050565b6000806000806080858703121561038457600080fd5b843593506020850135801515811461039b57600080fd5b925060408501356001600160a01b03811681146103b757600080fd5b9396929550929360600135925050565b600080604083850312156103da57600080fd5b505080516020909101519092909150565b60006001820161040b57634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000835180604084015260005b818110156104405760208187018101516060868401015201610423565b506000606082850101526060601f19601f830116840101915050826020830152939250505056fea264697066735822122068533c268a7674eb933eee2b4dd3252cfd85b0dea1a66da4fce75e6db5f5481564736f6c63430008110033";

type DigitalPayoffPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DigitalPayoffPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DigitalPayoffPool__factory extends ContractFactory {
  constructor(...args: DigitalPayoffPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DigitalPayoffPool> {
    return super.deploy(overrides || {}) as Promise<DigitalPayoffPool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DigitalPayoffPool {
    return super.attach(address) as DigitalPayoffPool;
  }
  override connect(signer: Signer): DigitalPayoffPool__factory {
    return super.connect(signer) as DigitalPayoffPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DigitalPayoffPoolInterface {
    return new utils.Interface(_abi) as DigitalPayoffPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DigitalPayoffPool {
    return new Contract(address, _abi, signerOrProvider) as DigitalPayoffPool;
  }
}
