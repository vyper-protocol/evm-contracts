/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TradePool, TradePoolInterface } from "../../contracts/TradePool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum TradePool.Sides",
        name: "",
        type: "uint8",
      },
    ],
    name: "TradeClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TradeCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum TradePool.Sides",
        name: "",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TradeFunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TradeSettled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tradeID",
        type: "uint256",
      },
      {
        internalType: "enum TradePool.Sides",
        name: "_side",
        type: "uint8",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_collateral",
        type: "address",
      },
      {
        internalType: "contract IPayoffPoolPlugin",
        name: "_payoffPool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_payoffID",
        type: "uint256",
      },
      {
        internalType: "uint88",
        name: "_depositEnd",
        type: "uint88",
      },
      {
        internalType: "uint88",
        name: "_settleStart",
        type: "uint88",
      },
      {
        internalType: "uint256",
        name: "_longRequiredAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_shortRequiredAmount",
        type: "uint256",
      },
    ],
    name: "createTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tradeID",
        type: "uint256",
      },
      {
        internalType: "enum TradePool.Sides",
        name: "_side",
        type: "uint8",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tradeID",
        type: "uint256",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "settleData",
    outputs: [
      {
        internalType: "address",
        name: "longUser",
        type: "address",
      },
      {
        internalType: "address",
        name: "shortUser",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "longPnl",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortPnl",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "trades",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "collateral",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "depositEnd",
        type: "uint88",
      },
      {
        internalType: "contract IPayoffPoolPlugin",
        name: "payoffPool",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "settleStart",
        type: "uint88",
      },
      {
        internalType: "bool",
        name: "settleExecuted",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "payoffID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "longRequiredAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortRequiredAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TradePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TradePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TradePool__factory extends ContractFactory {
  constructor(...args: TradePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TradePool> {
    return super.deploy(overrides || {}) as Promise<TradePool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TradePool {
    return super.attach(address) as TradePool;
  }
  override connect(signer: Signer): TradePool__factory {
    return super.connect(signer) as TradePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TradePoolInterface {
    return new utils.Interface(_abi) as TradePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TradePool {
    return new Contract(address, _abi, signerOrProvider) as TradePool;
  }
}
