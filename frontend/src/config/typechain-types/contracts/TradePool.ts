/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TradePoolInterface extends utils.Interface {
  functions: {
    "claim(uint256,uint8)": FunctionFragment;
    "createTrade(address,address,uint256,uint88,uint88,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint8)": FunctionFragment;
    "settle(uint256)": FunctionFragment;
    "settleData(uint256)": FunctionFragment;
    "trades(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "createTrade"
      | "deposit"
      | "settle"
      | "settleData"
      | "trades"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;

  events: {
    "TradeClaimed(uint256,uint8)": EventFragment;
    "TradeCreated(uint256)": EventFragment;
    "TradeFunded(uint256,uint8,address)": EventFragment;
    "TradeSettled(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TradeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSettled"): EventFragment;
}

export interface TradeClaimedEventObject {
  arg0: BigNumber;
  arg1: number;
}
export type TradeClaimedEvent = TypedEvent<
  [BigNumber, number],
  TradeClaimedEventObject
>;

export type TradeClaimedEventFilter = TypedEventFilter<TradeClaimedEvent>;

export interface TradeCreatedEventObject {
  arg0: BigNumber;
}
export type TradeCreatedEvent = TypedEvent<
  [BigNumber],
  TradeCreatedEventObject
>;

export type TradeCreatedEventFilter = TypedEventFilter<TradeCreatedEvent>;

export interface TradeFundedEventObject {
  arg0: BigNumber;
  arg1: number;
  arg2: string;
}
export type TradeFundedEvent = TypedEvent<
  [BigNumber, number, string],
  TradeFundedEventObject
>;

export type TradeFundedEventFilter = TypedEventFilter<TradeFundedEvent>;

export interface TradeSettledEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
  arg2: BigNumber;
}
export type TradeSettledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TradeSettledEventObject
>;

export type TradeSettledEventFilter = TypedEventFilter<TradeSettledEvent>;

export interface TradePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTrade(
      _collateral: PromiseOrValue<string>,
      _payoffPool: PromiseOrValue<string>,
      _payoffID: PromiseOrValue<BigNumberish>,
      _depositEnd: PromiseOrValue<BigNumberish>,
      _settleStart: PromiseOrValue<BigNumberish>,
      _longRequiredAmount: PromiseOrValue<BigNumberish>,
      _shortRequiredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        longUser: string;
        shortUser: string;
        longPnl: BigNumber;
        shortPnl: BigNumber;
      }
    >;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collateral: string;
        depositEnd: BigNumber;
        payoffPool: string;
        settleStart: BigNumber;
        settleExecuted: boolean;
        payoffID: BigNumber;
        longRequiredAmount: BigNumber;
        shortRequiredAmount: BigNumber;
      }
    >;
  };

  claim(
    _tradeID: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTrade(
    _collateral: PromiseOrValue<string>,
    _payoffPool: PromiseOrValue<string>,
    _payoffID: PromiseOrValue<BigNumberish>,
    _depositEnd: PromiseOrValue<BigNumberish>,
    _settleStart: PromiseOrValue<BigNumberish>,
    _longRequiredAmount: PromiseOrValue<BigNumberish>,
    _shortRequiredAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _tradeID: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      longUser: string;
      shortUser: string;
      longPnl: BigNumber;
      shortPnl: BigNumber;
    }
  >;

  trades(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      collateral: string;
      depositEnd: BigNumber;
      payoffPool: string;
      settleStart: BigNumber;
      settleExecuted: boolean;
      payoffID: BigNumber;
      longRequiredAmount: BigNumber;
      shortRequiredAmount: BigNumber;
    }
  >;

  callStatic: {
    claim(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTrade(
      _collateral: PromiseOrValue<string>,
      _payoffPool: PromiseOrValue<string>,
      _payoffID: PromiseOrValue<BigNumberish>,
      _depositEnd: PromiseOrValue<BigNumberish>,
      _settleStart: PromiseOrValue<BigNumberish>,
      _longRequiredAmount: PromiseOrValue<BigNumberish>,
      _shortRequiredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        longUser: string;
        shortUser: string;
        longPnl: BigNumber;
        shortPnl: BigNumber;
      }
    >;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collateral: string;
        depositEnd: BigNumber;
        payoffPool: string;
        settleStart: BigNumber;
        settleExecuted: boolean;
        payoffID: BigNumber;
        longRequiredAmount: BigNumber;
        shortRequiredAmount: BigNumber;
      }
    >;
  };

  filters: {
    "TradeClaimed(uint256,uint8)"(
      arg0?: null,
      arg1?: null
    ): TradeClaimedEventFilter;
    TradeClaimed(arg0?: null, arg1?: null): TradeClaimedEventFilter;

    "TradeCreated(uint256)"(arg0?: null): TradeCreatedEventFilter;
    TradeCreated(arg0?: null): TradeCreatedEventFilter;

    "TradeFunded(uint256,uint8,address)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TradeFundedEventFilter;
    TradeFunded(arg0?: null, arg1?: null, arg2?: null): TradeFundedEventFilter;

    "TradeSettled(uint256,uint256,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TradeSettledEventFilter;
    TradeSettled(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TradeSettledEventFilter;
  };

  estimateGas: {
    claim(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTrade(
      _collateral: PromiseOrValue<string>,
      _payoffPool: PromiseOrValue<string>,
      _payoffID: PromiseOrValue<BigNumberish>,
      _depositEnd: PromiseOrValue<BigNumberish>,
      _settleStart: PromiseOrValue<BigNumberish>,
      _longRequiredAmount: PromiseOrValue<BigNumberish>,
      _shortRequiredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTrade(
      _collateral: PromiseOrValue<string>,
      _payoffPool: PromiseOrValue<string>,
      _payoffID: PromiseOrValue<BigNumberish>,
      _depositEnd: PromiseOrValue<BigNumberish>,
      _settleStart: PromiseOrValue<BigNumberish>,
      _longRequiredAmount: PromiseOrValue<BigNumberish>,
      _shortRequiredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _tradeID: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
