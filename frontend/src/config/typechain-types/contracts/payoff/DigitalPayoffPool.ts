/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DigitalPayoffPoolInterface extends utils.Interface {
  functions: {
    "createDigitalPayoff(int256,bool,address,uint256)": FunctionFragment;
    "digitalData(uint256)": FunctionFragment;
    "execute(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createDigitalPayoff" | "digitalData" | "execute"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDigitalPayoff",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "digitalData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDigitalPayoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "digitalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;

  events: {
    "PayoffCreated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayoffCreated"): EventFragment;
}

export interface PayoffCreatedEventObject {
  arg0: BigNumber;
}
export type PayoffCreatedEvent = TypedEvent<
  [BigNumber],
  PayoffCreatedEventObject
>;

export type PayoffCreatedEventFilter = TypedEventFilter<PayoffCreatedEvent>;

export interface DigitalPayoffPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DigitalPayoffPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDigitalPayoff(
      _strike: PromiseOrValue<BigNumberish>,
      _isCall: PromiseOrValue<boolean>,
      _ratePlugin: PromiseOrValue<string>,
      _oracleID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    digitalData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        oracleAdapter: string;
        isCall: boolean;
        strike: BigNumber;
        oracleID: BigNumber;
      }
    >;

    execute(
      payoffID: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnlLong: BigNumber; pnlShort: BigNumber }
    >;
  };

  createDigitalPayoff(
    _strike: PromiseOrValue<BigNumberish>,
    _isCall: PromiseOrValue<boolean>,
    _ratePlugin: PromiseOrValue<string>,
    _oracleID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  digitalData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      oracleAdapter: string;
      isCall: boolean;
      strike: BigNumber;
      oracleID: BigNumber;
    }
  >;

  execute(
    payoffID: PromiseOrValue<BigNumberish>,
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pnlLong: BigNumber; pnlShort: BigNumber }
  >;

  callStatic: {
    createDigitalPayoff(
      _strike: PromiseOrValue<BigNumberish>,
      _isCall: PromiseOrValue<boolean>,
      _ratePlugin: PromiseOrValue<string>,
      _oracleID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    digitalData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        oracleAdapter: string;
        isCall: boolean;
        strike: BigNumber;
        oracleID: BigNumber;
      }
    >;

    execute(
      payoffID: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnlLong: BigNumber; pnlShort: BigNumber }
    >;
  };

  filters: {
    "PayoffCreated(uint256)"(arg0?: null): PayoffCreatedEventFilter;
    PayoffCreated(arg0?: null): PayoffCreatedEventFilter;
  };

  estimateGas: {
    createDigitalPayoff(
      _strike: PromiseOrValue<BigNumberish>,
      _isCall: PromiseOrValue<boolean>,
      _ratePlugin: PromiseOrValue<string>,
      _oracleID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    digitalData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      payoffID: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDigitalPayoff(
      _strike: PromiseOrValue<BigNumberish>,
      _isCall: PromiseOrValue<boolean>,
      _ratePlugin: PromiseOrValue<string>,
      _oracleID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    digitalData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      payoffID: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
