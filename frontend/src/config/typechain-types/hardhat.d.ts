/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DigitalPayoffPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DigitalPayoffPool__factory>;
    getContractFactory(
      name: "IPayoffPoolPlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPayoffPoolPlugin__factory>;
    getContractFactory(
      name: "ChainlinkAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkAdapter__factory>;
    getContractFactory(
      name: "IOracleAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleAdapter__factory>;
    getContractFactory(
      name: "MockOracleAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleAdapter__factory>;
    getContractFactory(
      name: "TradePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradePool__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DigitalPayoffPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DigitalPayoffPool>;
    getContractAt(
      name: "IPayoffPoolPlugin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPayoffPoolPlugin>;
    getContractAt(
      name: "ChainlinkAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkAdapter>;
    getContractAt(
      name: "IOracleAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleAdapter>;
    getContractAt(
      name: "MockOracleAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleAdapter>;
    getContractAt(
      name: "TradePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TradePool>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
